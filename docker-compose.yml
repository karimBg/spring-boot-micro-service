version: '3.7'
services:
  ## MYSQL Docker Compose Config
  mysql-order:
    container_name: mysql-order
    image: mysql:latest
    environment:
      MYSQL_DATABASE: order-service
      MYSQL_ROOT_PASSWORD: password
      MYSQL_PASSWORD: password
    volumes:
      - ./mysql-order:/data/mysql
    expose:
      - "3306"
    ports:
      - "3306:3306"
    restart: always

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres:latest
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_DATABASE: inventory-service
      POSTGRES_ROOT_PASSWORD: password
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    restart: always

  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./mongo-data-volume:/data/db

#  ## Keycloak Config with Mysql database
#  keycloak-mysql:
#    container_name: keycloak-mysql
#    image: mysql:5.7
#    volumes:
#      - ./mysql_keycloak_data:/var/lib/mysql
#    environment:
#      MYSQL_ROOT_PASSWORD: root
#      MYSQL_DATABASE: keycloak
#      MYSQL_USER: keycloak
#      MYSQL_PASSWORD: password
#
#  keycloak:
#    container_name: keycloak
#    image: quay.io/keycloak/keycloak:18.0.0
#    command: [ "start-dev", "--import-realm" ]
#    environment:
#      DB_VENDOR: MYSQL
#      DB_ADDR: mysql
#      DB_DATABASE: keycloak
#      DB_USER: keycloak
#      DB_PASSWORD: password
#      KEYCLOAK_ADMIN: admin
#      KEYCLOAK_ADMIN_PASSWORD: admin
#    ports:
#      - "8181:8080"
#    volumes:
#      - ./realms/:/opt/keycloak/data/import/
#    depends_on:
#      - keycloak-mysql
#
#  ## Eureka Server
#  discovery-server:
#    build: ./discovery-server
#    container_name: discovery-server
#    pull_policy: always
#    ports:
#      - 8761:8761
#    environment:
#      - eureka.instance.hostname=localhost
#      - eureka.client.register-with-eureka=false
#      - eureka.client.fetch-registry=false
#      - eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
#      - server.port=8761
#      - app.eureka.username=eureka
#      - app.eureka.password=password
#
##  api-gateway:
##    container_name: api-gateway
##    build: ./api-gateway
##    pull_policy: always
##    depends_on:
##      - discovery-server
##      - keycloak
##    ports:
##      - "8080:8080"
##    expose:
##      - "8080"
##    environment:
##      - eureka.client.serviceUrl.defaultZone=http://eureka:password@discovery-server:8761/eureka
##      - spring.application.name=api-gateway
##      - logging.level.root=INFO
##      - logging.level.org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator=INFO
##      - logging.level.org.springframework.cloud.gateway=TRACE
##      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8181/realms/spring-boot-microservices-realm
#
#  order-service:
#    container_name: order-service
#    build: ./order-service
#    pull_policy: always
#    ports:
#      - 8081:8081
#    depends_on:
#      - mysql-order
#      - discovery-server
##      - api-gateway
#    environment:
#      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
#      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-order:3306/order-service
#      - SPRING_DATASOURCE_USERNAME=root
#      - SPRING_DATASOURCE_PASSWORD=password
#      - SPRING_PROFILES_ACTIVE=docker
#      - server.port=8081
#      - eureka.client.serviceUrl.defaultZone=http://eureka:password@discovery-server:8761/eureka/
#      - spring.application.name=order-service
#
#    ## Inventory-Service Docker Compose Config
#  inventory-service:
#    container_name: inventory-service
#    build: ./inventory-service
#    pull_policy: always
#    ports:
#      - 8085:8085
#    depends_on:
#      - postgres-inventory
#      - discovery-server
##      - api-gateway
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
#      - eureka.client.serviceUrl.defaultZone=http://eureka:password@discovery-server:8761/eureka/
#      - server.port=8085
#      - spring.application.name=inventory-service

#  ## Product-Service Docker Compose Config
#  product-service:
#    container_name: product-service
#    build: ./product-service
#    ports:
#      - 8086:8086
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URI=mongodb://mongo:27017/product-service
#      - eureka.client.serviceUrl.defaultZone=http://eureka:password@discovery-server:8761/eureka/
#      - spring.application.name=product-service
#      - server.port=8086
#    depends_on:
#      - mongo
#      - discovery-server
#      - api-gateway